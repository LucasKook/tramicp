% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alias.R
\name{BoxCoxICP}
\alias{BoxCoxICP}
\alias{SurvregICP}
\alias{survregICP}
\alias{coxphICP}
\alias{ColrICP}
\alias{CoxphICP}
\alias{LehmannICP}
\alias{LmICP}
\alias{lmICP}
\alias{PolrICP}
\alias{polrICP}
\alias{glmICP}
\alias{cotramICP}
\alias{rangerICP}
\title{Aliases for implemented model classes}
\usage{
BoxCoxICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

SurvregICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

survregICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

coxphICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

ColrICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

CoxphICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

LehmannICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

LmICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

lmICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

PolrICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

polrICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

glmICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

cotramICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)

rangerICP(
  formula,
  data,
  env,
  verbose = TRUE,
  type = "residual",
  test = "gcm.test",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  mandatory = NULL,
  ...
)
}
\arguments{
\item{formula}{A \code{formula} including response and covariate terms.}

\item{data}{A \code{data.frame} containing response and explanatory variables.}

\item{env}{A \code{formula} specifying the environment variables (see details).}

\item{verbose}{Logical, whether output should be verbose (default \code{TRUE}).}

\item{type}{Character, type of invariance (\code{"residual"}, \code{"wald"},
or \code{"partial"}).}

\item{test}{Character, type of test to be used (\code{"HSIC"}, \code{"t.test"},
\code{"var.test"}, \code{"wald"}) or custom function for testing
invariance.}

\item{controls}{Controls for the used tests and the overall procedure,
see \code{dicp_controls}.}

\item{alpha}{Level of invariance test, default \code{0.05}.}

\item{baseline_fixed}{Fixed baseline transformation, see
\code{\link[tramicp]{dicp_controls}}.}

\item{greedy}{Logical, whether to perform a greedy version of ICP (default is
\code{FALSE}).}

\item{max_size}{Numeric; maximum support size.}

\item{mandatory}{A \code{formula} containing mandatory covariates, i.e.,
covariates which by a priori knowledge are believed to be parents
of the response or are in another way required for the model to be
valid (for instance, random effects in a mixed model).}

\item{...}{Further arguments passed to \code{modFUN}.}
}
\value{
Object of type \code{"dICP"}. See \code{\link[tramicp]{dicp}}
}
\description{
Aliases for implemented model classes

ICP for parametric survival models

ICP for parametric survival models

ICP for the classical (semi-parametric) Cox model

ICP for Continuous outcome logistic regression

ICP for Cox proportional hazards regression

ICP for Lehmann regression models

ICP for normal linear regression

ICP for normal linear regression (using stats::lm)

ICP for cumulative ordinal regression

ICP for cumulative ordinal regression using \code{MASS::polr()}

ICP for generalized linear models

ICP for count transformation models

nonparametric ICP with ranger GCM
}
\examples{
set.seed(123)
d <- dgp_dicp(mod = "boxcox", n = 300)
BoxCoxICP(Y ~ X2, data = d, env = ~ E)

set.seed(123)
d <- dgp_dicp(mod = "weibull", n = 300)
SurvregICP(Y ~ X1 + X2 + X3, data = d, env = ~ E)

set.seed(123)
d <- dgp_dicp(mod = "weibull", n = 300)
if (require("survival")) {
  d$surv <- Surv(d$Y)
  survregICP(surv ~ X1 + X2 + X3, data = d, env = ~ E)
}

set.seed(123)
d <- dgp_dicp(mod = "coxph", n = 300)
if (require("survival")) {
  d$surv <- Surv(d$Y)
  coxphICP(surv ~ X1 + X2 + X3, data = d, env = ~ E)
}

set.seed(123)
d <- dgp_dicp(mod = "colr", n = 300)
ColrICP(Y ~ X1 + X2 + X3, data = d, env = ~ E, type = "wald", test = "wald")

set.seed(123)
d <- dgp_dicp(mod = "coxph", n = 300)
CoxphICP(Y ~ X2, data = d, env = ~ E)

set.seed(123)
d <- dgp_dicp(mod = "coxph", n = 300)
LehmannICP(Y ~ X2, data = d, env = ~ E)

set.seed(123)
d <- dgp_dicp(mod = "lm", n = 300)
LmICP(Y ~ X1 + X2 + X3, data = d, env = ~ E)

set.seed(123)
d <- dgp_dicp(mod = "lm", n = 300)
lmICP(Y ~ X1 + X2 + X3, data = d, env = ~ E)

set.seed(123)
d <- dgp_dicp(mod = "polr", n = 300)
PolrICP(Y ~ X1 + X2 + X3, data = d, env = ~ E)

set.seed(123)
d <- dgp_dicp(mod = "polr", n = 300)
polrICP(Y ~ X1 + X2 + X3, data = d, env = ~ E)

set.seed(123)
d <- dgp_dicp(mod = "binary", n = 300)
glmICP(Y ~ X1 + X2 + X3, data = d, env = ~ E, family = "binomial")

set.seed(123)
d <- dgp_dicp(mod = "cotram", n = 300)
cotramICP(Y ~ X2, data = d, env = ~ E)

set.seed(123)
d <- dgp_dicp(mod = "binary", n = 300)
rangerICP(Y ~ X1 + X2 + X3, data = d, env = ~ E)

}
