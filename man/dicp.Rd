% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tramicp.R
\name{dicp}
\alias{dicp}
\title{Invariant causal prediction for transformation models}
\usage{
dicp(
  formula,
  data,
  env,
  modFUN,
  verbose = TRUE,
  type = c("residual", "wald", "mcheck", "confint"),
  test = "independence",
  controls = NULL,
  alpha = 0.05,
  baseline_fixed = TRUE,
  greedy = FALSE,
  max_size = NULL,
  ...
)
}
\arguments{
\item{formula}{Formula including response and shift terms}

\item{data}{Data.frame containing response and explanatory variables}

\item{env}{Formula specifying the exogenous environment variables}

\item{modFUN}{Model function from package 'tram', i.e. \code{BoxCox},
\code{Colr}, \code{Polr}, \code{Lm}, \code{Coxph}, \code{Survreg},
\code{Lehmann}. Standard implementations \code{lm}, \code{glm}, and
\code{\link[MASS]{polr}} are also supported.}

\item{verbose}{Logical, whether output should be verbose (default \code{TRUE})}

\item{type}{Character, type of invariance (\code{"residual"}, \code{"wald"},
or \code{"partial"})}

\item{test}{Character, type of test to be used (\code{"HSIC"}, \code{"t.test"},
\code{"var.test"}, \code{"wald"}) or custom function for testing
invariance.}

\item{controls}{Controls for the used tests and the overall procedure,
see \code{dicp_controls}}

\item{alpha}{Level of invariance test, default}

\item{baseline_fixed}{Fixed baseline transformation, see
\code{\link[tramicp]{dicp_controls}}.}

\item{greedy}{Logical, whether to perform a greedy version of ICP (default is
\code{FALSE})}

\item{max_size}{Numeric; maximum support size}

\item{...}{Further arguments passed to \code{modFUN}}
}
\value{
Object of class \code{"dICP"}, containing the invariant set (if exists),
    pvalues from all invariance tests and the tests themselves
}
\description{
Invariant causal prediction for transformation models
}
\examples{
set.seed(123)
d <- dgp_dicp(n = 1e3, mod = "polr")
dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "confint")
dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "wald")
dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "wald",
    weights = abs(rnorm(nrow(d))))
dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "residual")
dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "residual",
     test = "HSIC")

dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "confint", greedy = TRUE)
dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "wald", greedy = TRUE)
dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "wald",
    weights = abs(rnorm(nrow(d))), greedy = TRUE)
dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "residual", greedy = TRUE, max_size = 1)
dicp(Y ~ X1 + X2 + X3, data = d, env = ~ E, modFUN = Polr, type = "residual",
     test = "HSIC", greedy = TRUE)

}
