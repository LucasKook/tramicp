% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alias.R
\name{mpolrICP}
\alias{mpolrICP}
\title{ICP for cumulative ordinal regression using \code{MASS::polr()}}
\usage{
mpolrICP(
  formula,
  data,
  env,
  type = "residual",
  test = "indep",
  controls = dicp_controls(type, test),
  ...
)
}
\arguments{
\item{formula}{Formula including response and shift terms}

\item{data}{Data.frame containing response and explanatory variables}

\item{env}{Character, name of environmental variable}

\item{type}{Character, type of invariance (\code{"residual"}, \code{"wald"},
or \code{"partial"})}

\item{test}{Character, type of test to be used (\code{"HSIC"}, \code{"t.test"},
\code{"var.test"}, \code{"wald"}) or custom function for testing
invariance.}

\item{controls}{Controls for the used tests, see \code{dicp_controls}}

\item{...}{
  Arguments passed on to \code{\link[=dicp]{dicp}}
  \describe{
    \item{\code{modFUN}}{Model function from package 'tram', i.e. \code{BoxCox},
\code{Colr}, \code{Polr}, \code{Lm}, \code{Coxph}, \code{Survreg},
\code{Lehmann}. Standard implementation \code{lm} is also supported.}
    \item{\code{verbose}}{Logical, whether output should be verbose (default \code{TRUE})}
    \item{\code{trt}}{Character, supply only when \code{type = "partial"}, treatment
variable. Ignored otherwise}
    \item{\code{baseline_fixed}}{Logical, whether baseline transformation is fixed
(\code{TRUE}) or allowed to vary across environments (\code{FALSE}).
Defaults to \code{TRUE}, i.e. a fixed baseline transformation}
    \item{\code{alpha}}{Level of invariance test, default}
  }}
}
\value{
Object of type \code{"dICP"}. See \code{\link[tramicp]{dicp}}
}
\description{
ICP for cumulative ordinal regression using \code{MASS::polr()}
}
\examples{
d <- dgp_dicp(mod = "polr")
mpolrICP(Y ~ X2, data = d, env = "E", type = "residual", test = "HSIC")
# Almost identical to `PolrICP()`
mpolrICP(Y ~ X2, data = d, env = "E", type = "residual", test = "indep")$pvals
PolrICP(Y ~ X2, data = d, env = "E", type = "residual", test = "indep")$pvals
mpolrICP(Y ~ X2, data = d, env = "E", type = "wald", test = "wald")$pvals
# Not implemented yet (will throw exception):
# mpolrICP(Y ~ X2, data = d, env = "E", type = "confint")

}
