% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dgp-random-dag.R
\name{dgp_random_dag}
\alias{dgp_random_dag}
\title{Generating data from a random DAG}
\usage{
dgp_random_dag(
  n = 100,
  mod = "polr",
  K = 6,
  ia = FALSE,
  rm_censoring = TRUE,
  standardize = FALSE,
  plot_model = FALSE,
  errDistAnY = "normal",
  mixAnY = 0.1,
  errDistDeY = "normal",
  mixDeY = 0.1,
  dag = random_dag()
)
}
\arguments{
\item{n}{Integer; sample size.}

\item{ia}{Interacting}

\item{standardize}{Standardize ancestral and descendental data}

\item{plot_model}{Toggle; plot model}

\item{errDistAnY}{Error distribution for ancestral DAG}

\item{mixAnY}{Mixture proportion for ancestral DAG}

\item{errDistDeY}{Error distribution for descendental DAG}

\item{mixDeY}{Mixture proportion for deccendental DAG}

\item{dag}{DAG as returned from \code{random_dag()}}
}
\value{
Simulated data from random DAG.
}
\description{
Generating data from a random DAG
}
\examples{
set.seed(21)
nanc <- ndec <- 2
dag <- random_dag(nanc = nanc, ndec = ndec, penv = 1)
d <- dgp_random_dag(n = 1e3, mod = "colr", dag = dag)
attr(d, "paY")
attr(d, "oracle_icp")
fml <- Y ~ X1 + X2 + X3 + X4
ColrICP(fml, data = d, env = "E", type = "wald")
ColrICP(fml, data = d, env = "E", type = "confint")
ColrICP(fml, data = d, env = "E", type = "residual")
ColrICP(fml, data = d, env = "E", type = "mcheck")
# cdkci("Y", "E", paste0("X", 1:(nanc + ndec)), data = d, GP = FALSE)

mods <- c("polr", "boxcox", "cotram", "colr", "weibull", "lm")
sapply(mods, \(m) dgp_random_dag(mod = m))

set.seed(1)
d <- dgp_random_dag(mod = "weibull", plot = TRUE, standardize = TRUE)
attr(d, "cfb")

}
